from datetime import datetime

from db.models.user import get_admins
from bot.bot import send_message

from db.models.order import Order, OrderStatus
from db.models.sale import Sale, SaleStatus

from bot.stat_handler import build_pipeline_data


order_status_messages = {
        # OrderStatus.NEW: "üì© <b>–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b>",
        # OrderStatus.ACCEPTED_TO_WH: "üì¶ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç —Å–∫–ª–∞–¥–æ–º</b>",
        # OrderStatus.CANCELLED: "‚ûñ <b>–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑</b>",
        # OrderStatus.UNDEFINED: "‚ùì <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</b>"
    }

sales_status_messages = {
        SaleStatus.UNDEFINED: "‚ùì <b>–°—Ç–∞—Ç—É—Å –≤—ã–∫—É–ø–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</b>",
        SaleStatus.NEW: "‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –≤—ã–∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä</b>",
        SaleStatus.RETURN: "‚ùå <b>–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –∑–∞–∫–∞–∑</b>"
    }

admins_to_notify = [user for user in get_admins() if user.receive_orders]


def notify_updated_orders(orders: list[Order]):
    if not orders:
        return
    for order in orders:
        if order.status in order_status_messages:
            text = order_status_messages[order.status].format(order.id) + "\n\n" + build_order_data(order)

            for user in admins_to_notify:
                send_message(chat_id=user.tg_chat_id, text=text, disable_notifications=True)


def notify_updated_sales(sales: list[Sale]):
    if not sales:
        return
    for sale in sales:
        if sale.status in sales_status_messages:
            text = sales_status_messages[sale.status].format(sale.id) + "\n\n" + build_sale_data(sale)

            for user in admins_to_notify:
                send_message(chat_id=user.tg_chat_id, text=text)


def notyfy_pipeline():
     for user in admins_to_notify:
        send_message(chat_id=user.tg_chat_id, text=(
            'üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</b>'
            '\n\n' + build_pipeline_data()
        ))


def build_order_data(order: Order) -> str:
    result = f"–¢–æ–≤–∞—Ä: <b>{order.supplier_article}</b>"
    result += "\n"
    result += f"–°—É–º–º–∞: <b>{order.price_with_disc}</b>"
    result += "\n"
    result += f"–†–µ–≥–∏–æ–Ω: <b>{order.region_name}, {order.oblast_okrug_name}</b>"
    result += "\n"
    result += f"–°–æ —Å–∫–ª–∞–¥–∞: <b>{order.warehouse_name}</b>"
    result += "\n\n"
    result += f"<i>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: <b>{order.date.strftime('%d.%m.%Y %H:%M:%S')}</b></i>"
    # result += "\n"
    # result += f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{order.last_change_date.strftime('%d.%m.%Y %H:%M:%S')}</b></i>"
    # result += "\n"
    # result += f"<i>ID –∑–∞–∫–∞–∑–∞: <b>{order.id if order.id is not None else "---"}</b></i>"
    return result


def build_sale_data(sale: Sale) -> str:
    result = f"–¢–æ–≤–∞—Ä: <b>{sale.supplier_article}</b>"
    result += "\n"
    result += f"–°—É–º–º–∞: <b>{sale.price_with_disc}</b>"
    result += "\n"
    result += f"–†–µ–≥–∏–æ–Ω: <b>{sale.region_name}, {sale.oblast_okrug_name}</b>"
    result += "\n"
    result += f"–°–æ —Å–∫–ª–∞–¥–∞: <b>{sale.warehouse_name}</b>"
    result += "\n\n"
    result += f"<i>–î–∞—Ç–∞ –≤—ã–∫—É–ø–∞: <b>{sale.date.strftime('%d.%m.%Y %H:%M:%S')}</b></i>"
    # result += "\n"
    # result += f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{sale.last_change_date.strftime('%d.%m.%Y %H:%M:%S')}</b></i>"
    # result += "\n"
    # result += f"<i>ID –≤—ã–∫—É–ø–∞: <b>{sale.id if sale.id is not None else "---"}</b></i>"
    return result